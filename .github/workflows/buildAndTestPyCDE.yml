name: Build and Test PyCDE (unified build)

on:
  pull_request:
    types: [assigned, opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  build-circt-unified:
    name: Configure Unified Build
    runs-on: ubuntu-20.04
    steps:
      # Clone the CIRCT repo and its submodules. Do shallow clone to save clone
      # time.
      - name: Get CIRCT
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
          submodules: "true"

      # Choose the git commit to diff against for the purposes of linting.
      # Since this workflow is triggered on both pushes and pull requests, we
      # have to determine if the pull request target branch is set (which it
      # will only be on the PR triggered flow). If it's not, then compare
      # against the last commit.
      - name: choose-commit
        if: ${{ always() }}
        env:
          # Base ref is the target branch, in text form (not hash)
          PR_BASE: ${{ github.base_ref }}
        run: |
          # Run clang-format
          if [ -z "$PR_BASE" ]; then
            DIFF_COMMIT_NAME="HEAD^"
          else
            DIFF_COMMIT_NAME="$PR_BASE"
          fi
          echo "DIFF_COMMIT_NAME=$DIFF_COMMIT_NAME" >> $GITHUB_ENV

      # Since we did a shallow fetch for this repo, we must fetch the commit
      # upon which we be diff'ing. The last step set the ref name in the
      # $DIFF_COMMIT_NAME environment variable. When running the fetch, resolve
      # it to the commit hash and pass that hash along to subsequent steps.
      - name: git fetch base commit
        continue-on-error: true
        run: |
          if echo "$DIFF_COMMIT_NAME" | grep -q HEAD; then
            DIFF_COMMIT_SHA=$( git rev-parse $DIFF_COMMIT_NAME )
          else
            git fetch --recurse-submodules=no origin $DIFF_COMMIT_NAME
            DIFF_COMMIT_SHA=$( git rev-parse origin/$DIFF_COMMIT_NAME )
          fi
          echo "DIFF_COMMIT=$DIFF_COMMIT_SHA" >> $GITHUB_ENV

      - name: Job execution gate
        run: |
          # If this is a PR, run the PR gate
          if [ ${{ github.event.action }} == "opened" ] || [ ${{ github.event.action }} == "synchronize" ] || [ ${{ github.event.action }} == "reopened" ] || [ ${{ github.event.action }} == "assigned" ]; then
            # Only run the job if there is a change in anything PyCDE-related.
            pip3 install GitPython # until https://github.com/circt/images/pull/22 lands
            echo "RUN_PYCDE_CI=$(python3 .github/workflows/scripts/pr_gate.py '(PyCDE)' $DIFF_COMMIT)" >> $GITHUB_ENV
          else
            echo "This is a manually triggered build. Running job"
            echo "RUN_PYCDE_CI=1" >> $GITHUB_ENV
          fi

      - name: Get LLVM Hash
        id: get-llvm-hash
        run: echo "::set-output name=hash::$(git rev-parse @:./llvm)"
        if: ${{ env.RUN_PYCDE_CI == '1' }}

      - name: Get workflow spec hash
        id: get-workflow-hash
        run: echo "::set-output name=hash::$(md5sum $GITHUB_WORKSPACE/.github/workflows/buildAndTestPyCDE.yml | awk '{print $1}')"
        if: ${{ env.RUN_PYCDE_CI == '1' }}

      # Try to fetch a build from the cache. Since this is a unified build, we're
      # not expecting much speedup, but small diffs should still yield a speedup.
      - name: Cache unified build
        id: cache-unified
        uses: actions/cache@v2
        with:
          path: |
            build
          key: ${{ runner.os }}-llvm-${{ steps.get-llvm-hash.outputs.hash }}-${{ steps.get-workflow-hash.outputs.hash }}-${{ matrix.compiler.cc }} 
        if: ${{ env.RUN_PYCDE_CI == '1' }}

      - name: Configure Unified Build
        if: ${{ env.RUN_PYCDE_CI == '1' }}
        run: |
          # move into image
          /usr/bin/python3.8 -m pip install numpy pybind11
          mkdir build
          cd build
          cmake ../llvm/llvm \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=ON \
            -DLLVM_ENABLE_PROJECTS=mlir \
            -DLLVM_TARGETS_TO_BUILD=host \
            -DLLVM_ENABLE_ASSERTIONS=ON \
            -DLLVM_EXTERNAL_PROJECTS=circt \
            -DLLVM_EXTERNAL_CIRCT_SOURCE_DIR=$PWD/..\
            -DMLIR_ENABLE_BINDINGS_PYTHON=ON \
            -DCIRCT_BINDINGS_PYTHON_ENABLED=ON \
            -DCIRCT_ENABLE_FRONTENDS=PyCDE \
            -DPython3_EXECUTABLE=/usr/bin/python3.8
      
      - name: Build
        if: ${{ env.RUN_PYCDE_CI == '1' }}
        run: |
          cd build
          cmake --build . 

      - name: Test PyCDE
        if: ${{ env.RUN_PYCDE_CI == '1' }}
        run: |
          cd build
          make check-pycde -j$(nproc)
      
      - name: Test PyCDE integration tests
        if: ${{ env.RUN_PYCDE_CI == '1' }}
        run: |
          cd build
          make check-pycde-integration -j$(nproc)
